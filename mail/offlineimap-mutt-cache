#!/usr/bin/env bash
# Tool to automatically update mutt cache.

. lib.bash || exit

syncdir() {
	local name=$1
	local dname=${name//\//.}

	local maildir=$mailroot/$dname
	[[ -d $maildir ]] || {
		err "maildir not found: $maildir"
		return
	}

	local cachedir=$mutt_cache/$name
	[[ -d $cachedir ]] || mkdir -p "$cachedir"

	local validity=$(<"$oimap_cache/Repository-$oimap_repo/FolderValidity/$dname")

	shopt -s nullglob
	local files=("$maildir"/{cur,new}/*:*)
	shopt -u nullglob

	local mailfile
	local cachefile
	local basename
	local uid

	local re=',U=([[:digit:]]+),'

	for mailfile in "${files[@]}"; do
		basename=${mailfile##*/}
		if ! [[ $basename =~ $re ]]; then
			err "non-OfflineIMAP message file: $basename"
			continue
		fi
		uid=${BASH_REMATCH[1]}
		cachefile=$cachedir/$validity-$uid
		if [[ ! -f "$cachefile" ]]; then
			say "$name/$validity-$uid: not found, caching"
			ln -f "$mailfile" "$cachefile"
		elif cmp "$mailfile" "$cachefile"; then
			say "$name/$validity-$uid: okay"
		else
			say "$name/$validity-$uid: mismatch, updating"
			ln -f "$mailfile" "$cachefile"
		fi
	done
}

VERBOSE=false
mailroot=~/Backup/Mail
oimap_cache=~/.cache/OfflineIMAP
oimap_repo=Nullroute
mutt_cache=~/.cache/mutt/@nullroute

if [[ $1 == "-v" ]]; then
	VERBOSE=true
	shift
fi

if ! (( $# )); then
	folders=( "$mailroot"/*/ )
	folders=( "${folders[@]%/}" )
	folders=( "${folders[@]##*/}" )
	folders=( "${folders[@]//.//}" )
	set -- "${folders[@]}"
fi

for d do
	syncdir "$d"
done

! (( errors ))
