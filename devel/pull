#!/usr/bin/env bash
# pull - update version control repositories to latest upstream versions

is() {
	printf '\e[1m== Updating %s (%s)\e[m\n' "$(basename "$PWD")" "$1"
}

log:() {
	printf '... %s\n' "$*"
	"$@"
}

svnsync() {
	local lib=$(which libfunsync.so 2>/dev/null)
	if [[ -f $lib ]]; then
		env LD_PRELOAD="$lib" svnsync "$@"
	else
		env svnsync "$@"
	fi
}

is_ignored() {
	[[ -u . ]]
}

do_pull() {
	if [[ -d .git/svn ]]; then
		is "Git – SVN clone"
		if remote=$(git config --get svn-remote.svn.url); then
			rroot=$(svn info "$remote" | sed -n 's/^Repository Root: //p')
			log: svnsync sync "$rroot"
		fi
		log: git svn fetch
	elif [[ -d .git ]]; then
		is "Git"
		log: git pull
		if [[ -e .gitmodules ]]; then
			log: git submodule update
		fi
	elif [[ -d .hg ]]; then
		is "Mercurial"
		log: hg pull --update
	elif [[ -d .svn ]]; then
		is "SVN"
		rroot=$(svn info "$remote" | sed -n 's/^Repository Root: //p')
		if [[ $rroot == file://* ]]; then
			log: svnsync sync "$rroot"
		fi
		log: svn update
	elif [[ -d .bzr ]]; then
		is "Bazaar"
		log: bzr pull
	elif [[ -d CVS ]]; then
		is "CVS"
		log: cvs -q up -d -P -A
	elif [[ -f format && -f hooks/pre-revprop-change ]]; then
		is "SVN – svnsync mirror"
		log: svnsync sync "file://$PWD"
	elif [[ -f HEAD ]] && d=$(git rev-parse --git-dir 2>/dev/null); then
		is "Git – bare repository"
		log: git fetch
	fi
}

if (( $# )); then
	declare -A did
	for dir; do
		if [[ ! ${did[$dir]} ]]; then
			did[$dir]=y
			(cd "$dir" && ! is_ignored && do_pull)
		fi
	done
else
	do_pull
fi
