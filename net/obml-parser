#!/usr/bin/env python
# A barebones parser for OBML files used by Opera Mini
#
# Originally intended to extract original URLs from saved pages, after Opera dropped
# binary compatibilty between minor releases and left me with a bunch of unreadable
# saved pages in v15 â€” and it does that.

import sys
import struct

class Parser():
    def __init__(self, path):
        self.path = path
        self.fh = open(path, 'rb')

    def debug(self, typ, data):
        print(typ, repr(data), file=sys.stderr)
        return data

    def read(self, length):
        buf = self.fh.read(length)
        if len(buf) < length:
            raise IOError("Hit EOF after %d/%d bytes" % (len(buf), length))
        return self.debug("raw[%d]" % length, buf)

    def read_byte(self):
        buf = self.fh.read(1)
        data, = struct.unpack('>B', buf)
        return self.debug("byte", data)

    def read_short(self):
        buf = self.fh.read(2)
        data, = struct.unpack('>H', buf)
        return self.debug("short", data)

    def read_chunk(self):
        length = self.read_short()
        buf = self.fh.read(length)
        if len(buf) < length:
            raise IOError("Hit EOF after %d/%d bytes" % (len(buf), length))
        return self.debug("chunk[%d]" % length, buf)

    def read_string(self):
        buf = self.read_chunk()
        return buf.decode('utf-8')

d = {}

f = Parser(sys.argv[1])

magic = f.read(4)
if magic != b'\x02\xd3U\x10':
    raise IOError('Bad magic number (old OBML format?)')

f.read(3)

version = f.read_byte()

f.read_short() # always 240
if version == 15:
    f.read(8)
elif version == 16:
    f.read(5)
else:
    raise IOError('Unknown version %d' % version)

page_title = f.read_string()

f.read_chunk()
# nil on v16, 'C\x10\x10...' on v15

page_referer = f.read_string()

page_url = f.read_string()
if page_url[0] == "\0":
    page_url = page_referer + page_url[1:]

print(page_title)
print(page_url)
print()
