#!/usr/bin/env python
# Simple Unix and INET socket relay server
from __future__ import print_function
import getopt
import os
import select
import socket
import sys
import threading

class UnixifyRelay(threading.Thread):
    def __init__(self, listenaf=None, listenaddr=None, serveraf=None, serveraddr=None):
        threading.Thread.__init__(self)
        self.listenaf = listenaf
        self.listenaddr = listenaddr
        self.serveraf = serveraf
        self.serveraddr = serveraddr

        self.debug = False
        self.maxconns = 0
        self.listencookie = None
        self.servercookie = None

        self.poolsem = None

    def run(self):
        if self.maxconns:
            self.poolsem = threading.Semaphore(value=self.maxconns)

        self.cleanup()
        self.listenfd = socket.socket(self.listenaf, socket.SOCK_STREAM)
        self.listenfd.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
        self.listenfd.bind(self.listenaddr)
        self.listenfd.listen(64)

        while True:
            try:
                clientfd, clientaddr = self.listenfd.accept()
            except KeyboardInterrupt:
                self.listenfd.close()
                self.cleanup()
                sys.exit()

            worker = UnixifyRelayWorker(self, clientfd)
            worker.daemon = True
            worker.start()

    def cleanup(self):
        if self.listenaf == socket.AF_UNIX \
        and self.listenaddr[0] != '\0' \
        and os.path.exists(self.listenaddr):
                os.unlink(self.listenaddr)

class UnixifyRelayWorker(threading.Thread):
    def __init__(self, listener, clientfd):
        threading.Thread.__init__(self)
        self.listener = listener
        self.clientfd = clientfd

    def run(self):
        if self.listener.poolsem:
            self.listener.poolsem.acquire()

        if self.listener.listencookie:
            length = len(self.listener.listencookie)
            data = self.clientfd.recv(length)
            if data != self.listener.listencookie:
                print(self.clientfd.fileno(), "bad cookie")
                self.clientfd.close()
                return

        self.serverfd = socket.socket(self.listener.serveraf, socket.SOCK_STREAM)
        try:
            self.serverfd.connect(self.listener.serveraddr)
        except socket.error:
            self.clientfd.close()
            raise

        if self.listener.servercookie:
            self.send(self.serverfd, self.listener.servercookie)

        while True:
            r, w, x = [self.clientfd, self.serverfd], [], []
            r, w, x = select.select(r, w, x)
            for ifd in r:
                if ifd == self.clientfd:
                    ofd = self.serverfd
                else:
                    ofd = self.clientfd

                data = ifd.recv(65536)
                if self.listener.debug:
                    print(ifd.fileno(), repr(data))
                if data:
                    self.send(ofd, data)
                else:
                    ifd.close()
                    ofd.close()
                    return

        if self.listener.poolsem:
            self.listener.poolsem.release()

    def send(self, fd, data):
        pos = 0
        size = len(data)
        while size:
            sent = fd.send(data[pos:])
            pos += sent
            size -= sent

def usage():
    print("Usage: unixify [-c listencookie] [-C servercookie] <listenaddr> <serveraddr>")
    return 2

def parse_addr(address):
    if address[0] == '/':
        return socket.AF_UNIX, address
    elif address[0] == '@':
        return socket.AF_UNIX, '\0'+address[1:]
    elif address[0] == '[':
        # TODO TODO TODO TODO TODO
        pos = address.index(']')
        host = address[1:pos-1]
        if address[pos+1] == ':':
            port = int(address[pos+2:])
        if ':' in host:
            return socket.AF_INET6, (host, port)
        # FIXME FIXME FIXME FIXME
    else:
        host, port = address.rsplit(':', 1)
        return socket.AF_INET, (host, int(port))

    raise ValueError("invalid address format: %r" % address)

def read_cookie_file(path):
    return open(path, 'rb').read(1024)

def main():
    relay = UnixifyRelay()

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], 'C:Dc:')
    except getopt.GetoptError as e:
        print("unixify:", e.msg, file=sys.stderr)
        return usage()

    for opt, optarg in opts:
        if False:
            pass
        elif opt == '-C':
            relay.servercookie = read_cookie_file(optarg)
        elif opt == '-D':
            relay.debug = True
        elif opt == '-c':
            relay.listencookie = read_cookie_file(optarg)

    try:
        relay.listenaf, relay.listenaddr = parse_addr(args.pop(0))
        relay.serveraf, relay.serveraddr = parse_addr(args.pop(0))
    except IndexError:
        print("unixify: not enough arguments", file=sys.stderr)
        return usage()

    relay.run()

sys.exit(main())
