#!/usr/bin/env perl
use feature "say";

use Data::Dumper;
use File::Temp;
use HTML::TreeBuilder;
use LWP::ConnCache;
use LWP::UserAgent;
use URI;

my $ua = LWP::UserAgent->new(
		agent => "Mozilla/4.0",
		timeout => 5,
		keep_alive => 5,
		show_progress => $ENV{DEBUG},
		);

my $x11_prompter = "$ENV{HOME}/code/x11/ask-captcha";

sub urlencode {
	my $str = shift;
	$str =~ s/[^A-Za-z0-9_.!~*'()-]/sprintf("%%%02X", ord($&))/seg;
	return $str;
}

sub ui_captcha_prompt {
	my ($img_url) = @_;
	my $response;
	if (defined $ENV{DISPLAY} && -x $x11_prompter) {
		my $tmp = File::Temp->new;
		my $req; do {
			$req = $ua->get($img_url, ":content_file" => $tmp->filename);
		} while $req->header("Client-Warning");

		open(my $proc, "-|", $x11_prompter, $tmp->filename);
		chomp($response = <$proc>);
		close($proc);
	} else {
		say STDERR "Challenge: $img_url";
		print STDERR "Response: ";
		chomp($response = <STDIN>);
	}
	return $response;
}

sub follow_redirect {
	my ($url) = @_;
	my $req = $ua->head($url);
	if ($req && $req->request) {
		return $req->request->uri;
	} else {
		return undef;
	}
}

sub gg_follow_redirect {
	my ($msgid) = @_;

	my $url_re = qr|//groups\.google\.com/group/([^/]+)/msg/(\w+)|;
	if ($msgid ~~ $url_re) {
		return ($1, $2);
	}

	my $msgid_enc = urlencode($msgid);

	my $msgid_url = "http://groups.google.com/groups?selm=$msgid_enc";
	my $final_url = follow_redirect($msgid_url);
	if ($final_url ~~ $url_re) {
		return ($1, $2);
	}

	return undef;
}

sub gg_fetch_article {
	my ($group, $mhash) = @_;

	my $interact_url = URI->new("http://groups.google.com/groups/unlock");
	my $raw_path = "/group/$group/msg/$mhash?dmode=source&output=gplain";
	$interact_url->query_form(_done => $raw_path, msg => $mhash);

	while (1) {
		my $article;

		my $req; do {
			$req = $ua->get($interact_url);
		} while $req->header("Client-Warning");

		my $tree = HTML::TreeBuilder->new;
		$tree->parse_content($req->decoded_content);

		# find CAPTCHA image
		my ($captcha_t) = $tree->look_down(_tag => "img", src => qr/token/);
		my $captcha_url = URI->new_abs($captcha_t->attr("src"), $interact_url);
		my $response = ui_captcha_prompt($captcha_url);

		# fill the form
		my ($form_t) = $tree->look_down(_tag => "form",
						action => qr/verify_captcha/);
		my %query = map {$_->attr("name") => $_->attr("value")}
				$form_t->look_down(_tag => "input");
		$query{answer} = $response;

		my $action_url = URI->new_abs($form_t->attr("action"), $interact_url);
		$action_url->query_form(\%query);

		# submit form, be redirected to $raw_path
		do {
			$req = $ua->get($action_url);
		} while $req->header("Client-Warning");

		my %params = $req->request->uri->query_form;

		if ($params{utoken}) {
			$article = $req->decoded_content;
			if ($article ~~ /^From:.+\.\.\.\@/mi) {
				say "Unlock failed.";
			} else {
				$article =~ s/^\s+\n//;
				return $article;
			}
		} elsif ($params{retry}) {
			say "Unlock failed.";
		} else {
			say "Redirected to hell knows where:";
			say "  $redirect_url";
			exit 1;
		}
	}

	return $article;
}

for my $msgid (@ARGV) {
	my ($group, $mhash) = gg_follow_redirect($msgid);
	if (!defined $group || !defined $mhash) {
		warn "Google doesn't have <$msgid>.\n";
		next;
	}

	say "Downloading $group--$mhash";

	my $article = gg_fetch_article($group, $mhash);
	say for grep {s/^/    /}
		grep {/^(From|Date|Message-ID|Subject):/i}
		split(/\n/, $article);

	my $file = "usenet.$group--$mhash.msg";
	if (open my $fh, ">", $file) {
		print $fh "From foo\@bar Thu Jan  1 03:00:00 1970\n";
		print $fh $article;
		close $fh;
		say "Stored $msgid to $file";
	}
}
