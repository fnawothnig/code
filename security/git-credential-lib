#!/usr/bin/env python2
from __future__ import print_function
import getopt
import sys

def usage():
    print("usage: %s [options] <store> <operation>" % sys.argv[0])
    print()
    print("options:")
    print("  -I, --[no-]interactive    allow store to prompt for credentials")
    list_stores()
    print()
    print("operations: get, store, erase")

def list_stores():
    print()
    print("supported credential stores: ('+' = available)")
    for name, klass in sorted(stores.items()):
        flag = "+" if klass().available() else " "
        descr = getattr(klass, "_description_", "Undocumented")
        print("  %1s %-15s %s" % (flag, name, descr))

def attr_is_private(k):
    return k == "password"

def attr_public(attr):
    #return dict((k, attr[k]) for k in attr if not attr_is_private(k))
    return {k: attr[k] for k in attr if not attr_is_private(k)}

def dict_encode(d):
    return {k.encode("utf-8"): v.encode("utf-8") for k, v in d.items()}

def dict_decode(d):
    return {k.decode("utf-8"): v.decode("utf-8") for k, v in d.items()}

def make_uri(attr, anonymous=False, nullpath=False):
    uri = ""
    if "protocol" in attr:
        uri += "%(protocol)s://" % attr
    if "host" in attr:
        if "username" in attr and anonymous is False:
            uri += "%(username)s@" % attr
        uri += attr["host"]
        if "port" in attr:
            uri += ":%(port)s" % attr
    if "path" in attr:
        uri += "/%(path)s" % attr
    elif not nullpath:
        uri += "/"
    return uri

def read_description():
    attr = {}
    for line in sys.stdin.read().splitlines():
        if not len(line):
            break
        try:
            if hasattr(line, "decode"):
                line = line.decode("utf-8")
            key, val = line.rstrip("\n").split("=", 1)
        except ValueError:
            print("error: invalid input %r" % line, file=sys.stderr)
            raise
        else:
            attr[key] = val
    return attr

def write_description(attr):
    for key, val in attr.items():
        line = "%s=%s\n" % (key, val)
        sys.stdout.write(line)

class CredStore(object):
    _description_ = None
    _required_ = []

    def __init__(self, options=None):
        raise NotImplementedError()

    def available(self):
        return False

    def handle(self, op, attr):
        if not self.available():
            return {}
        if not all(n in attr for n in self._required_):
            return {}
        if op == "store" and "password" not in attr:
            return {}
        try:
            func = getattr(self, "_cred_%s" % op)
        except AttributeError:
            # ignore unknown operations for future extensibility
            return {}
        else:
            return func(attr) or {}

class DummyLoopbackStore(CredStore):
    _description_ = "dummy test store"

    def __init__(self, options=None):
        pass

    def available(self):
        return True

    def _cred_get(self, attr):
        print("dummy: get", attr, file=sys.stderr)
        return attr

    def _cred_store(self, attr):
        print("dummy: store", attr, file=sys.stderr)
        return None

    def _cred_erase(self, attr):
        print("dummy: erase", attr, file=sys.stderr)
        return None

class GnomeKeyringStore(CredStore):
    _description_ = "GNOME Keyring"
    _required_ = ["protocol", "host"]

    def __init__(self, options=None):
        try:
            from gi.repository import GnomeKeyring, GLib
            GLib.set_application_name("git")
            self.gk = GnomeKeyring
            self.gi = True
        except ImportError:
            try:
                import glib
                import gnomekeyring
                glib.set_application_name("git")
                self.gk = gnomekeyring
            except ImportError:
                self.gk = None
            self.gi = False

    def available(self):
        return self.gk and self.gk.is_available()

    def map_attributes(self, inattr):
        outattr = {}
        for key, val in inattr.items():
            if key == "host":
                outattr["server"] = val
            elif key in ("port", "protocol"):
                outattr[key] = val
            elif key == "username":
                outattr["user"] = val
            else:
                outattr["git:%s" % key] = val
        return outattr

    def unmap_attributes(self, outattr):
        inattr = {}
        for key, val in outattr.items():
            if key.startswith("git:"):
                inattr[key[4:]] = val
            elif key in ("port", "protocol"):
                inattr[key] = val
            elif key == "server":
                inattr["host"] = val
            elif key == "user":
                inattr["username"] = val
            else:
                inattr[key] = val
        return inattr

    def make_keyring_object(self, attr):
        # TODO: This is ported from git//contrib/credential/gnome-keyring,
        # but not used yet because putting host in "object" is redundant

        host = attr.get("host", "")
        port = attr.get("port", 0)
        path = attr.get("path", "")

        if port:
            return "%s:%d/%s" % (host, port, path)
        else:
            return "%s/%s" % (host, path)

    def _gi_find(self, attr):
        # TODO: Does not yet find nonstandard attributes...
        """
        find_type = self.gk.ItemType.NETWORK_PASSWORD
        #find_attr = self.gk.AttributeList(find_attr)
        #find_attr = self.GLib.Array()
        #for k, v in self.map_attributes(attr_public(attr)).items():
        #   find_attr.
        err, results = self.gk.find_items_sync(find_type, find_attr)
        print(repr(err), repr(results))
        """
        find_attr = self.map_attributes(attr_public(attr))

        err, results = self.gk.find_network_password_sync(
            find_attr.get("user", None),
            find_attr.get("domain", None),
            find_attr.get("server", None),
            find_attr.get("path", None),
            find_attr.get("protocol", None),
            find_attr.get("authtype", None),
            attr.get("port", 0))
        return results

    def _gkr_find(self, attr):
        find_type = self.gk.ITEM_NETWORK_PASSWORD
        find_attr = self.map_attributes(attr_public(attr))
        find_attr = dict_encode(find_attr)
        try:
            return self.gk.find_items_sync(find_type, find_attr)
        except self.gk.NoMatchError:
            return []

    def _cred_get(self, attr):
        if self.gi:
            results = self._gi_find(attr)
            if not results:
                return None
            for res in results:
                for k in ("user", "domain", "server", "object",
                          "protocol", "authtype", "port", "password"):
                    v = getattr(res, k)
                    if v:
                        attr[k] = v
            return self.unmap_attributes(attr)
        else:
            results = self._gkr_find(attr)
            if not results:
                return None
            for res in results:
                attr.update(res.attributes)
                attr["password"] = res.secret
            return self.unmap_attributes(attr)

    def _cred_store(self, attr):
        if self.gi:
            err, keyring = self.gk.get_default_keyring_sync()

            item_attr = self.map_attributes(attr_public(attr))

            err = self.gk.set_network_password_sync(
                keyring,
                item_attr.get("user", None),
                item_attr.get("domain", None),
                item_attr.get("server", None),
                item_attr.get("path", None),
                item_attr.get("protocol", None),
                item_attr.get("authtype", None),
                item_attr.get("port", 0),
                attr["password"])
        else:
            keyring = self.gk.get_default_keyring_sync()
            item_type = self.gk.ITEM_NETWORK_PASSWORD
            display_name = attr["host"]
            item_attr = self.map_attributes(attr_public(attr))
            secret = attr["password"]
            update = True
            self.gk.item_create_sync(keyring, item_type, display_name,
                        item_attr, secret, update)

    def _cred_erase(self, attr):
        if self.gi:
            results = self._gi_find(attr)
            for res in results:
                if "password" in attr and res.password != attr["password"]:
                    continue
                self.gk.item_delete_sync(res.keyring, res.item_id)
        else:
            results = self._gkr_find(attr)
            for res in results:
                if "password" in attr and res.secret != attr["password"]:
                    continue
                self.gk.item_delete_sync(res.keyring, res.item_id)

class Win32CredentialStore(CredStore):
    _description_ = "Windows Credential Manager"
    _required_ = ["protocol", "host"]
    # WCM doesn't support wildcard matching for generic credentials,
    # I can't be bothered to expand the code to retry without protocol,
    # and the only relevant protocol is HTTPS anyway.

    ERROR_NOT_FOUND = 1168
    ERROR_CANCELLED = 1223
    SILENT_ERRORS = {ERROR_NOT_FOUND, ERROR_CANCELLED}

    interactive = True

    def __init__(self, options=None):
        if options:
            self.interactive = options.get("interactive", True)

        try:
            import win32con, win32cred, pywintypes
            self._con = win32con
            self._cred = win32cred
            self._types = pywintypes
        except ImportError:
            self._cred = None

    def available(self):
        return bool(self._cred and self._cred.CredUIPromptForCredentials)

    def make_target_name(self, attr):
        # Windows credential manager identifies generic credentials by a
        # "target name", which can be any string. We use an URI here.
        #
        # The name is also prefixed with "git:" for compatibility with
        # `git-credential-winstore`. This may or may not be temporary;
        # see https://github.com/anurse/git-credential-winstore/pull/19
        return "git:%s" % make_uri(attr, anonymous=True, nullpath=True)

    def _cred_get(self, attr):
        target = self.make_target_name(attr)

        try:
            cred = self._cred.CredRead(target, self._cred.CRED_TYPE_GENERIC)
        except self._types.error as e:
            if e.winerror == self.ERROR_NOT_FOUND:
                cred = None
            else:
                print("Error: %s(): %s" % (e.funcname, e.strerror),
                    file=sys.stderr)
                return None

        if cred:
            if cred["UserName"] is not None:
                attr["username"] = cred["UserName"]
            if len(cred["CredentialBlob"]):
                attr["password"] = cred["CredentialBlob"].decode("utf-16-le")
            for cattr in cred["Attributes"]:
                attr[cattr["Keyword"]] = cattr["Value"].decode("utf-8")
            return attr
        elif self.interactive:
            user = attr.get("username", None)

            flags = self._cred.CREDUI_FLAGS_GENERIC_CREDENTIALS
            flags |= self._cred.CREDUI_FLAGS_EXCLUDE_CERTIFICATES
            # Git will store the credentials itself after confirming them
            flags |= self._cred.CREDUI_FLAGS_DO_NOT_PERSIST

            ui_info = dict(Parent=None,
                    #CaptionText="",
                    MessageText="Please enter login details for %s:" % target,
                    Banner=None)

            try:
                result = self._cred.CredUIPromptForCredentials(
                        TargetName=target,
                        UserName=user,
                        Save=False,
                        Flags=flags,
                        UiInfo=ui_info)
            except self._types.error as e:
                if e.winerror == self.ERROR_CANCELLED:
                    return None
                else:
                    print("Error: %s(): %s" % (e.funcname, e.strerror),
                        file=sys.stderr)

            user, passwd, persist = result
            if len(user) and len(passwd):
                attr["username"] = user
                attr["password"] = passwd
                return attr
            else:
                return None
        else:
            return None

    def _cred_store(self, attr):
        target = self.make_target_name(attr)

        cred = {
            "Type": self._cred.CRED_TYPE_GENERIC,
            "Flags": 0,
            "TargetName": target,
            "Persist": self._cred.CRED_PERSIST_ENTERPRISE,
            "Attributes": [],
        }
        for key, val in attr.items():
            if key == "host":
                # do not store 'host' attribute, it will be
                # provided in all queries anyway
                continue
            elif key == "username":
                cred["UserName"] = val
            elif key == "password":
                cred["CredentialBlob"] = val
            elif not attr_is_private(key):
                cattr = {"Keyword": key,
                    "Flags": 0,
                    "Value": val.encode("utf-8")}
                cred["Attributes"].append(cattr)

        try:
            self._cred.CredWrite(cred, 0)
        except self._types.error as e:
            if e.winerror not in self.SILENT_ERRORS:
                print("Error: %s(): %s" % (e.funcname, e.strerror),
                    file=sys.stderr)

        return None

    def _cred_erase(self, attr):
        target = self.make_target_name(attr)

        try:
            self._cred.CredDelete(target, self._cred.CRED_TYPE_GENERIC)
        except self._types.error as e:
            if e.winerror not in self.SILENT_ERRORS:
                print("Error: %s(): %s" % (e.funcname, e.strerror),
                    file=sys.stderr)

        return None

stores = {
    "dummy": DummyLoopbackStore,
    "gnomekeyring": GnomeKeyringStore,
    "windows": Win32CredentialStore,
}

if __name__ == "__main__":
    try:
        optlist, args = getopt.getopt(sys.argv[1:],
            "iI", ["interactive", "no-interactive"])
        store_name, op = args
    except getopt.GetoptError as err:
        print(err)
        sys.exit(2)
    except ValueError:
        usage()
        sys.exit(2)

    options = {"interactive": True}

    for opt, optarg in optlist:
        if opt in ("-i", "--interactive"):
            options["interactive"] = True
        elif opt in ("-I", "--no-interactive"):
            options["interactive"] = False

    if store_name not in stores:
        print("error: store %r not supported" % store_name, file=sys.stderr)
        list_stores()
        sys.exit(1)

    store = stores[store_name](options)
    if not store.available():
        sys.exit(2)

    try:
        attr = read_description()
    except ValueError:
        sys.exit(1)

    cred = store.handle(op, attr)
    if cred:
        write_description(cred)
