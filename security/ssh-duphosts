#!/usr/bin/env python
# ssh-duphosts -- checks for duplicate entries in ~/.ssh/known_hosts
from operator import itemgetter
import os
import sys
import getopt

def xprint(*args, **kwargs):
    file = kwargs.get("file", sys.stdout)
    args = " ".join(map(str, args))
    file.write(args + "\n")
    file.flush()

class Hostname(object):
    def __init__(self, value):
        self.value = value
        self.comparable = value.split(",", 1)[0]

    def __hash__(self):
        return hash(self.value)

    def __str__(self):
        return str(self.value)

    def __gt__(self, other):
        self_d = is_ip(self.comparable)
        other_d = is_ip(other.comparable)

        if self_d and not other_d:
            return True
        elif other_d and not self_d:
            return False
        else:
            return self.comparable > other.comparable

def is_ip(addr):
    if not addr:
        return False

    if addr[0] == "[":
        addr = addr[1:addr.find("]")]

    if ":" in addr:
        return True

    if all(x.isdigit() for x in addr.split(".")):
        return True

    return False

def find_duplicates(fh):
    keys = {}

    for line in fh:
        line = line.strip()
        if line == "" or line[0] == "#":
            continue

        try:
            if line[0] == "@":
                tag, host, ktype, key = line.split(" ", 3)
                host = tag + " " + host
            else:
                host, ktype, key = line.split(" ", 2)
        except ValueError:
            xprint("bad line %r" % line, file=sys.stderr)
            continue

        if ktype.isdigit():
            key = ktype + " " + key
            ktype = "(sshv1-rsa)"

        if (ktype, key) in keys:
            keys[ktype, key].append(host)
        else:
            keys[ktype, key] = [host]

    return keys

def print_duplicates(keys):
    for entry in keys:
        hosts = keys[entry]
        ktype, key = entry
        if len(hosts) > 1:
            xprint("Key [%(shortkey)s] has %(count)d entries:" % {
                "shortkey": ktype + " ..." + key[-15:],
                "count": len(hosts)
            })
            xprint("\t%s" % "\n\t".join(hosts))

def print_merged(bykey, unmerge=False):
    byhost = {}

    for entry in bykey:
        ktype, key = entry
        hosts = set()
        for item in bykey[entry]:
            hosts |= set(item.split(","))
        hosts.discard("")
        if unmerge:
            for host in hosts:
                host = Hostname(host)
                byhost[host, ktype] = key
        else:
            hosts = sorted(hosts, key=Hostname)
            host = Hostname(",".join(hosts))
            byhost[host, ktype] = key

    hosts = list(byhost.keys())
    hosts.sort(key=itemgetter(1))
    hosts.sort(key=itemgetter(0))

    for entry in hosts:
        host, ktype = entry
        key = byhost[entry]
        if ktype == "(sshv1-rsa)":
            xprint(host, key)
        else:
            xprint(host, ktype, key)

opt_input = os.path.expanduser("~/.ssh/known_hosts")
opt_merge = False
opt_unmerge = False

opts, args = getopt.getopt(sys.argv[1:], 'mM')
for opt, optarg in opts:
    if opt in ('m', '-m'):
        opt_merge = True
    elif opt in ('M', '-M'):
        opt_unmerge = True

if args:
    opt_input = args.pop(0)

if opt_input == "-":
    keys = find_duplicates(sys.stdin)
else:
    fh = open(opt_input, "r")
    keys = find_duplicates(fh)
    fh.close()

if opt_merge or opt_unmerge:
    print_merged(keys, opt_unmerge)
else:
    print_duplicates(keys)
