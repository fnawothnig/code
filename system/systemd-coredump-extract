#!/usr/bin/env python

# To be used on systems which have been configured to dump core into
# systemd-journald, but don't yet have systemd-coredumpctl.

from __future__ import print_function
import os
import shutil
import struct
import subprocess
import sys
import tempfile

# Use temporary files above 80 MB â€“ adjust to your free memory
BUF_MAX = 80 << 20

def journal_read(match):
    global BUF_MAX
    proc = subprocess.Popen(
        ["journalctl", "-o", "export"] + match,
        stdout=subprocess.PIPE)
    journal = proc.stdout
    record = {}
    while True:
        line = journal.readline()
        if not line:
            break
        elif line == b'\n':
            yield record
            record = {}
        elif b'=' in line:
            line = line.rstrip(b'\n')
            key, val = line.split(b'=', 1)
            key = key.decode("utf-8")
            val = val.decode("utf-8")
            # TODO: if needed, add support for multiple values
            record[key] = val
        else:
            line = line.rstrip(b'\n')
            key = line.decode("utf-8")
            size = journal.read(8)
            size, = struct.unpack("<Q", size)
            if size > BUF_MAX:
                file = tempfile.NamedTemporaryFile(dir="/var/tmp",
                    delete=False)
                while size > 0:
                    left = min(BUF_MAX, size)
                    try:
                        buf = journal.read(left)
                    except MemoryError:
                        BUF_MAX -= (8 << 20)
                        if BUF_MAX <= 0:
                            raise
                        continue
                    file.write(buf)
                    size -= len(buf)
                journal.read(1)
                # TODO: as above
                record[key] = (file.tell(), file.name)
                file.close()
            else:
                val = b""
                while size > 0:
                    buf = journal.read(size)
                    val += buf
                    size -= len(buf)
                journal.read(1)
                # TODO: as above
                record[key] = val
    if record:
        yield record

match_id = "MESSAGE_ID=fc2e22bc6ee647b6b90729ab34a250b1"

match = [match_id]
for arg in sys.argv[1:]:
    match.append(arg)
    if arg == "+":
        match.append(match_id)

for record in journal_read(match):
    try:
        pid = int(record["COREDUMP_PID"])
        comm = record["COREDUMP_COMM"]
        core = record["COREDUMP"]
    except KeyError as e:
        print("skipped incomplete record (missing %r field)" % e.args)
        continue

    path = "%s.%d.core" % (comm, pid)

    if type(core) is tuple:
        size, temp_path = core
        with open(temp_path, "rb") as in_fh:
            os.unlink(temp_path)
            with open(path, "wb") as out_fh:
                shutil.copyfileobj(in_fh, out_fh)
    else:
        size = len(core)
        with open(path, "wb") as out_fh:
            out_fh.write(core)

    print("saved core dump of pid=%d comm=%r (%d bytes) to %r" % \
        (pid, comm, size, path))
