#!/usr/bin/env bash
# Wrapper around GPG pinentry to be used as a simple 'askpass' tool.

usage() {
	echo "Usage: ${0##*/} [OPTION]... [description]"
	echo ""
	echo "    -d description set description"
	echo "    -t title       set entry window title"
	echo "    -p text        set entry prompt (default is 'PIN:')"
	echo ""
	echo "    -O oktext      set OK button label"
	echo "    -C canceltext  set Cancel button label"
	echo ""
	echo "    -g             (pinentry) append --no-global-grab"
	echo "    -W windowid    (pinentry) append --parent-wid \$windowid"
	echo "    -o option      (pinentry) append given option"
	echo "    -P path        use a different pinentry executable"
	exit 2
}

encode() {
	printf '%s' "$*" |
	perl -pe "s/([^A-Za-z0-9_.!~*'()-])/sprintf(\"%%%02X\", ord(\$1))/seg"
}

# You can set a default pinentry program and its options here.
# Examples:
#   pinentry=(pinentry-gtk-2 --no-global-grab)
pinentry=(pinentry)

i=0
debug=false
config=("SETPROMPT")

[[ $DEBUG ]] && {
	debug=true
	set -x
}

if [[ $LC_ALL ]]; then
	LC_MESSAGES=$LC_ALL
	LC_CTYPE=$LC_ALL
fi

while getopts ':c:C:Dd:ghO:o:P:p:t:xW:' OPT; do
	$debug && echo "getopts: [$OPTIND] -$OPT '$OPTARG'" >&2
	case "$OPT" in
	c)	config+=("$OPTARG") ;;
	C)	config+=("SETCANCEL $(encode "$OPTARG")") ;;
	D)	debug=true ;;
	d)	config+=("SETDESC $(encode "$OPTARG")") ;;
	g)	pinentry+=(--no-global-grab) ;;
	h)	usage ;;
	O)	config+=("SETOK $(encode "$OPTARG")") ;;
	o)	pinentry+=("$OPTARG") ;;
	P)	pinentry[0]="$OPTARG" ;;
	p)	config+=("SETPROMPT $(encode "$OPTARG")") ;;
	t)	config+=("SETTITLE $(encode "$OPTARG")") ;;
	W)	pinentry+=(--parent-wid "$(encode "$OPTARG")") ;;
	\?)	echo "${0##*/}: unknown option '$OPTARG'" >&2; usage >&2 ;;
	*)	echo "${0##*/}: option -$OPT not implemented" >&2; exit 2 ;;
	esac
done

if [[ "${!OPTIND}" ]]; then
	config+=("SETDESC $(encode "${!OPTIND}")")
fi

if [[ $GPG_TTY ]]; then
	pinentry+=(--ttyname "$GPG_TTY")
elif [[ -t 0 ]]; then
	pinentry+=(--ttyname /dev/tty)
fi

: ${LANG:='en_US.UTF-8'}
: ${LC_CTYPE:=$LANG}
: ${LC_MESSAGES:=$LANG}

#config+=(
#	"OPTION lc-ctype $LC_CTYPE"
#	"OPTION lc-messages $LC_CTYPE"
#)

pinentry+=(
	--lc-ctype "$LC_CTYPE"
	--lc-messages "$LC_MESSAGES"
)

configure() {
	if (( $i == ${#config[@]} )); then
		return 1
	else
		out "${config[$i]}"
		(( ++i ))
	fi
}

out() {
	$debug && echo "out: $*" >&2
	echo "$*" >&$out
}

trap "trap - SIGTERM; kill \$pinentry_pid" EXIT SIGINT SIGHUP SIGTERM SIGQUIT

# spawn the pinentry program
$debug && echo "command:" "${pinentry[@]}"
coproc "${pinentry[@]}"; pinentry_pid=$!
in=${COPROC[0]}
out=${COPROC[1]}

nextstate=configure
while read status rest <&$in; do
	$debug && {
		echo "State: $nextstate"
		echo "in: $status {$rest}"
	} >&2
	case "$nextstate" in
	configure)
		case "$status" in
		OK)
			configure || {
				out 'GETPIN'
				nextstate=waitinput
			} ;;
		ERR)
			echo "$rest" >&2
			exit 4 ;;
		esac ;;
	waitinput)
		# sent GETPIN, waiting for user action
		case "$status" in
		OK)
			# null input
			exit 0 ;;
		D)
			# data
			echo "$rest"
			exit 0 ;;
		ERR)
			# user cancelled
			exit 1 ;;
		esac ;;
	esac
done
